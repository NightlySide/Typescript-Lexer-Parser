{"version":3,"sources":["./src/compiler/ast/types.ts","./src/node_types/utils/index.ts","./src/app/graph/blocks_to_desc.ts","./src/compiler/lexer/utils.ts","./src/node_types/registry.ts","./src/compiler/lexer/words.ts","./src/node_types/native_types/index.ts","./src/environments/environment.ts","./src/app/graph/utils.ts","./src/app/graph/types.ts","./src/node_types/native_types/boolean.ts","./src/compiler/types.ts","./src/node_types/maths/addition.ts","./src/app/graph/graph.module.ts","./src/node_types/native_types/nombre.ts","./src/node_types/utils/program_start.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/node_types/utils/print.ts","./src/compiler/ast/ast.ts","./src/node_types/maths/index.ts","./src/app/app.module.ts","./src/compiler/lexer/lexer.ts","./src/node_types/maths/soustraction.ts","./src/node_types/maths/multiplication.ts","./src/app/graph/graph.component.ts","./src/app/graph/graph.component.html","./src/compiler/parser/grammar.ts","./src/node_types/native_types/string.ts","./src/node_types/maths/division.ts","./src/compiler/parser/parser.ts","./src/node_types/utils/to_string.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["class ASTNode {\n    name: string;\n    content: any;\n    children: ASTNode[] = [];\n\n    constructor(name: string) {\n        this.name = name;\n    }\n\n    public get_children(): ASTNode[] {\n        return this.children;\n    }\n\n    public add_child(node: ASTNode) {\n        this.children.push(node);\n    }\n}\n\nclass Root extends ASTNode {\n    constructor() {\n        super(\"Root\");\n    }\n}\n\nclass Block extends ASTNode {\n    constructor(identity: BlockIdentity, io: BlockIO, links?: BlockLinks) {\n        super(\"Block\");\n        if (links != undefined) this.children = [identity, io, links];\n        else this.children = [identity, io];\n    }\n}\n\nclass BlockIdentity extends ASTNode {\n    constructor(parameters: IdentityStatement[]) {\n        super(\"BlockIdentity\");\n        this.children = parameters;\n    }\n}\n\nclass BlockIO extends ASTNode {\n    constructor(ins_outs: IOStatement[]) {\n        super(\"BlockI/O\");\n        this.children = ins_outs;\n    }\n}\n\nclass BlockLinks extends ASTNode {\n    constructor(links: LinkStatement[]) {\n        super(\"BlockLinks\");\n        this.children = links;\n    }\n}\n\nclass Identifier extends ASTNode {\n    constructor(value: string) {\n        super(\"Identifier\");\n        this.content = value;\n    }\n}\n\nclass Value extends ASTNode {\n    constructor(value: any) {\n        super(\"Value\");\n        this.content = value;\n    }\n}\n\nclass IdentityStatement extends ASTNode {\n    constructor(id: Identifier, value: Value) {\n        super(\"IdentityStatement\");\n        this.children = [id, value];\n    }\n}\n\nclass IOStatement extends ASTNode {\n    constructor(in_or_out: Value, name: Value, type: Value, value: Value) {\n        super(\"IdentityStatement\");\n        this.children = [in_or_out, name, type, value];\n    }\n}\n\nclass LinkStatement extends ASTNode {\n    constructor(in_id: Value, out_id: Value, block_id: Value) {\n        super(\"LinkStatement\");\n        this.children = [in_id, out_id, block_id];\n    }\n}\n\nexport {\n    ASTNode,\n    Root,\n    Block,\n    BlockIdentity,\n    BlockIO,\n    BlockLinks,\n    Identifier,\n    Value,\n    IdentityStatement,\n    IOStatement,\n    LinkStatement,\n};\n","import { Print } from \"./print\";\nimport { ToString } from \"./to_string\";\nimport { ProgramStart } from \"./program_start\";\n\nexport { Print, ToString, ProgramStart };\n","import { Block } from \"./types\";\n\nexport function blocks_to_desc(block: Block[]): string {\n    let res = \"\";\n    block.forEach((block) => {\n        res += block.export_string();\n    });\n\n    return res;\n}\n","import { Token } from \"../types\";\n\nclass TokenToPrint {\n    position: string = \"\";\n    kind: string = \"\";\n    value: string = \"\";\n\n    constructor(position: string, kind: string, value: string) {\n        this.position = position;\n        this.kind = kind;\n        this.value = value;\n    }\n}\n\n/**\n * Takes a list of tokens and then pretty print them using\n * a table in the console and their name.\n *\n * @param tokens - the tokens to pretty print\n */\nfunction printTokens(tokens: Token[]): void {\n    const res: TokenToPrint[] = [];\n\n    // for each token extract the name and it's value\n    tokens.map((t: Token) =>\n        res.push(\n            new TokenToPrint(\n                `(${t.position.line}, ${t.position.col})`,\n                t.word.kind.toString(),\n                t.value\n            )\n        )\n    );\n    // then print it to the console using the table function\n    console.table(res);\n}\n\nexport { printTokens };\n","import { LiteGraph } from \"litegraph.js\";\n\nimport { Addition, Division, Multiplication, Soustraction } from \"./maths\";\nimport { Booleen, Nombre, String } from \"./native_types\";\nimport { Print, ProgramStart, ToString } from \"./utils\";\n\nfunction registerMaths() {\n    LiteGraph.registerNodeType(\"maths/addition\", Addition);\n    LiteGraph.registerNodeType(\"maths/soustraction\", Soustraction);\n    LiteGraph.registerNodeType(\"maths/multiplication\", Multiplication);\n    LiteGraph.registerNodeType(\"maths/division\", Division);\n}\n\nfunction registerTypes() {\n    LiteGraph.registerNodeType(\"types/booleen\", Booleen);\n    LiteGraph.registerNodeType(\"types/nombre\", Nombre);\n    LiteGraph.registerNodeType(\"types/string\", String);\n}\n\nfunction registerUtils() {\n    LiteGraph.registerNodeType(\"utils/print\", Print);\n    LiteGraph.registerNodeType(\"utils/to_string\", ToString);\n    LiteGraph.registerNodeType(\"utils/prgm_init\", ProgramStart);\n}\n\nexport default () => {\n    registerTypes();\n    registerMaths();\n    registerUtils();\n};\n","import WordKinds from \"../kinds\";\nimport { Word } from \"../types\";\n\n/**\n * Exports the word list from the language,\n * it is then the grammar of this project.\n */\nconst WordList = [\n    // spacing\n    new Word(WordKinds.INDENTATION, /( {4})|\\t/i),\n    new Word(WordKinds.SPACE, /[ ]+/),\n    new Word(WordKinds.NEW_LINE, /\\n/),\n    // variable types\n    new Word(WordKinds.TYPE, /((int)|(bool)|(float)|(char))/),\n    new Word(WordKinds.FLOAT, /[0-9]+\\.[0-9]+/),\n    new Word(WordKinds.INTEGER, /[0-9]+/),\n    new Word(WordKinds.BOOL, /((true)|(false))/),\n    new Word(WordKinds.STRING, /[\\\"\\'][ \\wéèàĥ+-\\_?!\\/\\*]*[\\\"\\']/),\n    new Word(WordKinds.VECTOR, /\\([0-9\\.\\, ]+\\)/),\n    // separators\n    new Word(WordKinds.SIMPLE_SEP, /----/),\n    new Word(WordKinds.DOUBLE_SEP, /====/),\n    // quotes\n    new Word(WordKinds.D_QUOTE, /\\\"/),\n    new Word(WordKinds.S_QUOTE, /\\'/),\n    // par, brackets...\n    new Word(WordKinds.L_PAR, /\\(/),\n    new Word(WordKinds.R_PAR, /\\)/),\n    new Word(WordKinds.L_CBRA, /\\{/),\n    new Word(WordKinds.R_CBRA, /\\}/),\n    // dots, comma, colon, ...\n    new Word(WordKinds.DOT, /\\./),\n    new Word(WordKinds.COMMA, /\\,/),\n    new Word(WordKinds.COLON, /\\:/),\n    new Word(WordKinds.S_COLON, /\\;/),\n    // operators\n    new Word(WordKinds.OP_EQ, /\\=\\=/),\n    new Word(WordKinds.OP_LEQ, /<\\=/),\n    new Word(WordKinds.OP_EQ, />\\=/),\n    new Word(WordKinds.OP_NEQ, /!\\=/),\n    new Word(WordKinds.EQ, /\\=/),\n    new Word(WordKinds.OP_PLUS, /\\+/),\n    new Word(WordKinds.OP_MINUS, /\\-/),\n    new Word(WordKinds.OP_MULT, /\\*/),\n    new Word(WordKinds.OP_DIV, /\\//),\n    new Word(WordKinds.OP_LT, /</),\n    new Word(WordKinds.OP_GT, />/),\n    new Word(WordKinds.BANG, /!/),\n    // the rest\n    new Word(WordKinds.LINKED_ID, /\\$[a-z][a-zA-Z0-9_]*/i),\n    new Word(WordKinds.IDENTIFIER, /[a-z][a-zA-Z0-9_]*/i),\n] as Word[];\n\nexport default WordList;\n","import { Nombre } from \"./nombre\";\nimport { Booleen } from \"./boolean\";\nimport { String } from \"./string\";\n\nexport { Nombre, Booleen, String };\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { AST } from \"../../compiler/ast/ast\";\nimport { Block, BlockIO, BlockLinks } from \"./types\";\nimport { LGraph, LGraphNode, LiteGraph } from \"litegraph.js\";\n\nfunction ast_to_block(tree: AST): Block[] {\n    let blocks: Block[] = tree\n        .get_root()\n        .get_children()\n        .map((block_node) => Block.from_ast_node(block_node));\n\n    return blocks;\n}\n\nfunction block_to_nodes(blocks: Block[]): Map<number, LGraphNode> {\n    let nodes = new Map<number, LGraphNode>();\n\n    // creating each node\n    blocks.forEach((block) => {\n        const node = LiteGraph.createNode(block.type);\n\n        if (node == null) {\n            console.log(\"Cannot build node with type: \", block.type);\n        } else {\n            node.id = block.id;\n            node.pos = [block.pos[0], block.pos[1]];\n            if (block.title != undefined) node.title = block.title;\n            if (block.value != undefined) node.setValue(block.value);\n\n            nodes.set(block.id, node);\n        }\n    });\n\n    return nodes;\n}\n\nfunction linking_nodes_on_graph(\n    nodes: Map<number, LGraphNode>,\n    blocks: Block[]\n) {\n    // linking the nodes\n    blocks.forEach((block) => {\n        let linked_node = nodes.get(block.id)!;\n\n        block.links.forEach((link) => {\n            let t_node = nodes.get(link.block_id);\n\n            if (t_node == undefined || linked_node == undefined) {\n                console.error(\n                    `Cannot link current node (id: ${block.id}, slot: ${link.out_id}) with target node (id: ${link.block_id}, slot: ${link.in_id})`\n                );\n                console.log(\"Current node\", linked_node);\n                console.log(\"Target node\", t_node);\n                console.log(\"Link data\", link);\n            } else {\n                console.debug(\n                    `Linking current node (id: ${linked_node.id}, slot: ${\n                        link.out_id\n                    }) with target node (id: ${link.block_id}, slot: ${\n                        link.in_id\n                    }) of type: ${block.outputs[link.out_id].io_type}`\n                );\n                linked_node.connect(link.out_id, t_node, link.in_id);\n            }\n        });\n    });\n}\n\nfunction nodes_to_block(graph: LGraph, nodes: LGraphNode[]): Block[] {\n    let hashmap = new Map<number, Block>();\n\n    let link_ids = new Set<number>();\n\n    // creating the blocks\n    nodes.forEach((node) => {\n        let block = new Block();\n\n        // identity\n        block.id = node.id;\n        block.pos = node.pos;\n        block.title = node.title;\n        block.type = node.type as string;\n\n        // values\n        if (node.properties[\"value\"] != undefined)\n            block.value = node.properties[\"value\"];\n\n        // IO\n        node.inputs.forEach((input) => {\n            let type = input.type as string;\n            if (String(type) === \"0\") type = \"anything\";\n\n            block.inputs.push(\n                new BlockIO(\"in\", input.name, type, input.link?.toString())\n            );\n        });\n        node.outputs.forEach((output) => {\n            block.outputs.push(\n                new BlockIO(\n                    \"out\",\n                    output.name,\n                    output.type as string,\n                    \"undefined\"\n                )\n            );\n            output.links?.forEach((link) => link_ids.add(link));\n        });\n\n        hashmap.set(block.id, block);\n    });\n\n    // adding links\n    link_ids.forEach((idx: number) => {\n        let link = graph.links[idx];\n        let b_origin = hashmap.get(link.origin_id)!;\n        let b_target = hashmap.get(link.target_id)!;\n        b_origin.links.push(\n            new BlockLinks(link.origin_slot, link.target_slot, b_target.id)\n        );\n    });\n\n    return Array.from(hashmap.values());\n}\n\nexport { ast_to_block, block_to_nodes, linking_nodes_on_graph, nodes_to_block };\n","import { ASTNode } from \"../../compiler/ast/types\";\n\nclass Block {\n    id: number = -1;\n    type: string = \"\";\n    pos: number[] = [0, 0];\n    title: string | undefined;\n    value: any;\n    inputs: BlockIO[] = [];\n    outputs: BlockIO[] = [];\n    links: BlockLinks[] = [];\n\n    public static from_ast_node(node: ASTNode): Block {\n        const block_id = node.get_children()[0]!;\n        const block_io = node.get_children()[1]!;\n        const block_links = node.get_children()[2] || new ASTNode(\"empty\");\n        let res = new Block();\n\n        // parsing id\n        block_id.get_children().forEach((id_st) => {\n            const param = id_st.get_children()[0].content;\n            switch (param) {\n                case \"id\":\n                    const id = id_st.get_children()[1].content;\n                    res.id = parseInt(id);\n                    break;\n                case \"type\":\n                    const b_type = id_st.get_children()[1].content.slice(1, -1);\n                    res.type = b_type;\n                    break;\n                case \"pos\":\n                    const pos_v = id_st.get_children()[1].content.slice(1, -1);\n                    const data = pos_v.split(\",\");\n                    res.pos = [parseInt(data[0]), parseInt(data[1])];\n                    break;\n                case \"title\":\n                    const t_value = id_st\n                        .get_children()[1]\n                        .content.slice(1, -1);\n                    res.title = t_value;\n                    break;\n                case \"value\":\n                    const v_value = id_st.get_children()[1].content;\n                    res.value = v_value;\n                    break;\n                default:\n                    console.error(\n                        `Couldn't understand id_param: ${param}, with arg: ${\n                            id_st.get_children()[1].content\n                        }`\n                    );\n                    break;\n            }\n        });\n\n        // parsing IO\n        block_io.get_children().forEach((io_st) => {\n            const in_out = io_st.get_children()[0].content as InputType;\n            const name = io_st.get_children()[1].content;\n            const io_type = io_st.get_children()[2].content;\n            const value = io_st.get_children()[3].content;\n\n            const block_io = new BlockIO(in_out, name, io_type, value);\n            if (in_out == \"in\") res.inputs.push(block_io);\n            else res.outputs.push(block_io);\n        });\n\n        // parsing links\n        block_links.get_children().forEach((link_st) => {\n            const out_id = parseInt(String(link_st.get_children()[0].content));\n            const in_id = parseInt(String(link_st.get_children()[1].content));\n            const block_id = parseInt(\n                String(link_st.get_children()[2].content)\n            );\n            res.links.push(new BlockLinks(out_id, in_id, block_id));\n        });\n\n        return res;\n    }\n\n    public export_string(): string {\n        let res = \"====\\n\";\n\n        // identity\n        res += `\\tid: ${this.id}\\n`;\n        res += `\\ttype: \"${this.type}\"\\n`;\n        res += `\\tpos: (${this.pos[0]}, ${this.pos[1]})\\n`;\n        if (this.title != undefined) res += `\\ttitle: \"${this.title}\"\\n`;\n        if (this.value != undefined) res += `\\tvalue: ${this.value}\\n`;\n        // i/o\n        res += \"\\t----\\n\";\n        this.inputs.forEach((input) => {\n            res += `\\tin: \"${input.name}\", ${input.io_type}, ${input.value}\\n`;\n        });\n        this.outputs.forEach((output) => {\n            res += `\\tout: \"${output.name}\", ${output.io_type}, ${output.value}\\n`;\n        });\n        // connexions\n        if (this.links.length > 0) {\n            res += \"\\t----\\n\";\n            this.links.forEach((link) => {\n                res += `\\tconn: ${link.out_id} ---> ${link.block_id}, ${link.in_id}\\n`;\n            });\n        }\n        res += \"====\\n\\n\";\n\n        return res;\n    }\n}\n\ntype InputType = \"in\" | \"out\";\nclass BlockIO {\n    in_or_out: InputType;\n    name: string;\n    io_type: string;\n    value: any;\n\n    constructor(\n        in_or_out: InputType,\n        name: string,\n        io_type: string,\n        value: any\n    ) {\n        this.in_or_out = in_or_out;\n        this.name = name;\n        this.io_type = io_type;\n        this.value = value;\n    }\n}\n\nclass BlockLinks {\n    out_id: number;\n    in_id: number;\n    block_id: number;\n\n    constructor(out_id: number, in_id: number, block_id: number) {\n        this.out_id = out_id;\n        this.in_id = in_id;\n        this.block_id = block_id;\n    }\n}\n\nexport { Block, BlockIO, BlockLinks };\n","import { LGraphNode, LiteGraph } from \"litegraph.js\";\n\nexport class Booleen extends LGraphNode {\n    constructor() {\n        super();\n\n        this.title = \"Booléen\";\n\n        this.addOutput(\"\", \"boolean\");\n        this.addProperty(\"value\", true, \"boolean\");\n\n        this.addWidget(\"toggle\", \"value\", true, \"value\");\n        this.widgets_up = true;\n    }\n\n    public onExecute() {\n        this.setOutputData(0, this.properties[\"value\"]);\n    }\n\n    public onAction(action: any) {\n        this.setValue(!this.properties.value);\n    }\n\n    public onGetInputs() {\n        return [[\"toggle\", LiteGraph.ACTION]];\n    }\n}\n","import WordKind from \"./kinds\";\n\nexport class Word {\n    /** Word's name used to understand the kind of token used */\n    public kind: WordKind;\n    /** The word's regular expression to detect the word in the content */\n    public regexp: RegExp;\n\n    /**\n     *\n     * Describes a word, an atom from the lexer grammar.\n     *\n     * @param name - The word's name\n     * @param regexp - The regular expression for the word\n     *\n     * @example\n     * ```typescript\n     * let w = new Word(\"IF\", /\\bif\\b/);\n     * ```\n     */\n    constructor(kind: WordKind, regexp: RegExp) {\n        this.kind = kind;\n        this.regexp = regexp;\n    }\n}\n\nexport class Token {\n    /** Token's word, a word defined in the lexer grammar */\n    public word: Word;\n    /** Token's value, a string of the content from the source */\n    public value: string;\n    /** Token's position, a line number and a col number */\n    public position: Position;\n\n    /**\n     *\n     * Describes a token, an atom from the source categorized\n     * by the lexer.\n     *\n     * @param word - The recognized word\n     * @param value - The value of this token\n     *\n     * @example\n     * ```typescript\n     * let t = new Token(new Word(\"IF\", /\\bif\\b/), \"if\");\n     * ```\n     */\n    constructor(position: Position, word: Word, value: string) {\n        this.position = position;\n        this.word = word;\n        this.value = value;\n    }\n}\n\nexport class Position {\n    /** Line of the object in the code */\n    public line: number;\n    /** Col of the object in the code */\n    public col: number;\n\n    /**\n     *\n     * A position in the code, simple structure to hold\n     * the line and the col at which an object lies.\n     *\n     * @param line - line of the object in the code\n     * @param col - col of the object in the code\n     *\n     * @example\n     * ```typescript\n     * let pos = new Position(2, 1);\n     * console.log(pos.line); // prints 2\n     * ```\n     */\n    constructor(line: number, col: number) {\n        this.line = line;\n        this.col = col;\n    }\n}\n","import { LGraphNode } from \"litegraph.js\";\n\nexport class Addition extends LGraphNode {\n    constructor() {\n        super();\n\n        this.title = \"Addition\";\n\n        this.addInput(\"A\", \"number\");\n        this.addInput(\"B\", \"number\");\n        this.addOutput(\"A+B\", \"number\");\n        this.properties = { precision: 1 };\n    }\n\n    public onExecute() {\n        let A: number = this.getInputData(0);\n        if (A === undefined) A = 0;\n\n        let B: number = this.getInputData(1);\n        if (B === undefined) B = 0;\n\n        this.setOutputData(0, A + B);\n    }\n}\n","import { NgModule } from \"@angular/core\";\nimport { BrowserModule } from \"@angular/platform-browser\";\n\nimport { GraphComponent } from \"./graph.component\";\n\n@NgModule({\n    declarations: [GraphComponent],\n    imports: [BrowserModule],\n    providers: [],\n    exports: [GraphComponent],\n    bootstrap: [GraphComponent],\n})\nexport class GraphModule {}\n","import { IWidget, LGraphNode } from \"litegraph.js\";\n\nexport class Nombre extends LGraphNode {\n    value_widget: IWidget;\n\n    constructor() {\n        super();\n\n        this.title = \"Nombre\";\n\n        this.addOutput(\"value\", \"number\");\n        this.addProperty(\"value\", 1.0, \"number\");\n        this.value_widget = this.addWidget(\"number\", \"value\", 1, \"value\");\n        this.widgets_up = true;\n    }\n\n    public onExecute() {\n        this.setOutputData(0, this.properties[\"value\"]);\n    }\n\n    public setValue(v: string) {\n        this.properties[\"value\"] = parseFloat(v);\n    }\n\n    public onDrawBackground(_: any) {\n        //show the current value\n        this.outputs[0].label = this.properties[\"value\"].toFixed(3);\n        this.value_widget.value = this.properties[\"value\"];\n    }\n}\n","import { LGraphNode } from \"litegraph.js\";\n\nexport class ProgramStart extends LGraphNode {\n    constructor() {\n        super();\n\n        this.title = \"Program Start\";\n\n        this.addOutput(\"next\", \"program_flow\");\n    }\n}\n","import { ViewChild } from \"@angular/core\";\nimport { Component } from \"@angular/core\";\nimport { LGraphNode } from \"litegraph.js\";\nimport { blocks_to_desc } from \"./graph/blocks_to_desc\";\nimport { GraphComponent } from \"./graph/graph.component\";\nimport { nodes_to_block } from \"./graph/utils\";\n\n@Component({\n    selector: \"app-root\",\n    templateUrl: \"./app.component.html\",\n    styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent {\n    code_content: string = \"Some python code\";\n    @ViewChild(GraphComponent) node_graph!: GraphComponent;\n\n    downloadFile(data: string, filename: string) {\n        var a = document.createElement(\"a\");\n        a.setAttribute(\"display\", \"none\");\n        document.body.appendChild(a);\n        const blob = new Blob([data], { type: \"text/text\" });\n        const url = window.URL.createObjectURL(blob);\n        a.href = url;\n        a.download = filename;\n        a.click();\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(a);\n    }\n\n    saveGraph() {\n        console.log(\"Saving\");\n        if (this.node_graph != undefined) {\n            let new_blocks = nodes_to_block(\n                this.node_graph.graph,\n                this.node_graph.graph.serialize().nodes as LGraphNode[]\n            );\n            this.code_content = blocks_to_desc(new_blocks);\n            this.downloadFile(this.code_content, \"MyAwesomeProgram.vpy\");\n        } else {\n            console.log(\"node graph undefined...\");\n        }\n    }\n\n    refreshCode() {\n        console.log(\"Refreshing...\");\n    }\n\n    sendFile(target: any) {\n        const files: FileList = target.files;\n        console.log(files);\n    }\n\n    uploadFile() {\n        var input = document.getElementById(\"file-upload\");\n        input?.click();\n    }\n\n    changeCode(value: string) {\n        this.code_content = value;\n    }\n}\n","<mat-toolbar color=\"primary\">\n    <button\n        mat-icon-button\n        class=\"example-icon\"\n        aria-label=\"Example icon-button with menu icon\"\n    >\n        <mat-icon>menu</mat-icon>\n    </button>\n    <span>BluePrintF</span>\n    <span class=\"example-spacer\"></span>\n    <button\n        mat-icon-button\n        class=\"example-icon favorite-icon\"\n        aria-label=\"Example icon-button with heart icon\"\n        (click)=\"refreshCode()\"\n    >\n        <mat-icon>refresh</mat-icon>\n    </button>\n    <button\n        mat-icon-button\n        class=\"example-icon favorite-icon\"\n        aria-label=\"Example icon-button with heart icon\"\n        (click)=\"uploadFile()\"\n    >\n        <mat-icon>upload</mat-icon>\n        <input\n            type=\"file\"\n            id=\"file-upload\"\n            (change)=\"sendFile($event.target)\"\n            style=\"display: none\"\n        />\n    </button>\n    <button\n        mat-icon-button\n        class=\"example-icon\"\n        aria-label=\"Example icon-button with share icon\"\n        (click)=\"saveGraph()\"\n    >\n        <mat-icon>save</mat-icon>\n    </button>\n</mat-toolbar>\n\n<div class=\"main-container\">\n    <div class=\"left-container\">\n        <node-graph></node-graph>\n    </div>\n    <div class=\"right-container\">\n        <pre>{{ code_content }}</pre>\n    </div>\n</div>\n","import { LGraphNode } from \"litegraph.js\";\n\nexport class Print extends LGraphNode {\n    constructor() {\n        super();\n\n        this.title = \"Print\";\n\n        this.addInput(\"prev\", \"program_flow\");\n        this.addInput(\"message\", \"string\");\n        this.addOutput(\"next\", \"program_flow\");\n        this.properties = { precision: 1 };\n    }\n\n    public onExecute() {\n        let msg: any = this.getInputData(1);\n        if (msg === undefined) msg = \"\";\n\n        console.log(msg);\n    }\n}\n","import { ASTNode, Root } from \"./types\";\n\nexport class AST {\n    root: Root;\n\n    constructor(root?: ASTNode) {\n        this.root = new Root();\n        if (root != undefined) this.root.add_child(root);\n    }\n\n    public get_root(): Root {\n        return this.root;\n    }\n\n    /* https://stackoverflow.com/questions/22038162/printing-a-tree-structure-in-a-list-like-manner-storing-the-indent-strings-whi */\n    public print_tree_v2() {\n        let res = \"Root\\n\";\n        treeIndent(\n            this.get_root().children,\n            {\n                hasNextSibling: \"┣\",\n                isLastChild: \"┗\",\n                ancestorHasNextSibling: \"┃\",\n                ancestorIsLastChild: \" \",\n            },\n            function (element: ASTNode, indent: []) {\n                let text = element.name;\n                if (element.children.length == 0)\n                    text += `(${element.content})`;\n                res += indent.join(\" \") + \" \" + text + \"\\n\";\n            },\n            []\n        );\n        console.log(res);\n    }\n}\n\nfunction treeIndent(\n    branch: ASTNode[],\n    cfg: any,\n    decorator: any,\n    indent: any[]\n) {\n    branch.forEach(function (node: ASTNode, i) {\n        decorator(\n            node,\n            indent.concat(\n                i === branch.length - 1 ? cfg.isLastChild : cfg.hasNextSibling\n            )\n        );\n\n        treeIndent(node.children, cfg, decorator, [\n            ...indent,\n            i === branch.length - 1\n                ? cfg.ancestorIsLastChild\n                : cfg.ancestorHasNextSibling,\n        ]);\n    });\n}\n","import { Addition } from \"./addition\";\nimport { Soustraction } from \"./soustraction\";\nimport { Multiplication } from \"./multiplication\";\nimport { Division } from \"./division\";\n\nexport { Addition, Soustraction, Multiplication, Division };\n","import { NgModule } from \"@angular/core\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { MatToolbarModule } from \"@angular/material/toolbar\";\nimport { MatIconModule } from \"@angular/material/icon\";\nimport { MatButtonModule } from \"@angular/material/button\";\n\nimport { AppComponent } from \"./app.component\";\nimport { GraphModule } from \"./graph/graph.module\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\n\n@NgModule({\n    declarations: [AppComponent],\n    imports: [\n        BrowserModule,\n        GraphModule,\n        BrowserAnimationsModule,\n        MatToolbarModule,\n        MatIconModule,\n        MatButtonModule,\n    ],\n    providers: [],\n    bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import WordKinds from \"../kinds\";\nimport { Position, Token, Word } from \"../types\";\n\n/**\n * A simple function to try to split a content\n * in tokens using a regular expression\n *\n * @param src - the source content\n *\n * @example\n * ```typescript\n * simpleCLexer(\"void main() {}\");\n * ```\n * Would print \"void\", \"main\", \"(\", \")\", \"{\", \"}\" to the console\n */\nexport function simpleCLexer(src: string): void {\n    const re = /void|main|\\(|\\)|\\{|\\}|[a-z]+|\\=|[0-9]+|\\s+/i;\n\n    // while there is still content to process\n    while (src.length > 0) {\n        // getting the matches\n        const matches = src.match(re);\n        if (matches == null) {\n            // we got no matches\n            console.log(\"unknown token: \", src);\n            break;\n        }\n\n        // getting the first match\n        const prefix = matches[0];\n        // logging the result\n        console.log(\"token: \", prefix);\n        // updating the src content\n        src = src.substr((prefix as string).length, src.length);\n    }\n}\n\n/**\n *\n * @param src - the content to lex\n * @param dict - dictionary of words, the grammar of the lexer\n * @returns - a\n */\nexport function lex(src: string, dict: Word[]): Token[] {\n    const res: Token[] = [];\n\n    let line_number = 1;\n    let col_number = 1;\n\n    while (src.length > 0) {\n        let foundMatch = false;\n        let matches: RegExpMatchArray | null;\n\n        for (const w of dict) {\n            matches = src.match(w.regexp);\n            if (matches != null && matches.index == 0) {\n                const prefix = matches[0];\n                src = src.substr((prefix as string).length, src.length);\n\n                // Generate new token\n                if ([WordKinds.NEW_LINE, WordKinds.SPACE, WordKinds.INDENTATION].indexOf(w.kind) == -1)\n                    res.push(new Token(new Position(line_number, col_number), w, prefix as string));\n\n                // if newline, change line\n                col_number += (prefix as string).length;\n                if (w.kind === WordKinds.NEW_LINE) {\n                    line_number++;\n                    col_number = 1;\n                }\n\n                // on a trouvé donc plus besoin de chercher\n                foundMatch = true;\n                break;\n            }\n        }\n\n        if (!foundMatch) {\n            console.error(\"unknown token: '\", src, \"'\");\n            break;\n        }\n    }\n\n    return res;\n}\n","import { LGraphNode } from \"litegraph.js\";\n\nexport class Soustraction extends LGraphNode {\n    constructor() {\n        super();\n\n        this.title = \"Soustraction\";\n\n        this.addInput(\"A\", \"number\");\n        this.addInput(\"B\", \"number\");\n        this.addOutput(\"A-B\", \"number\");\n        this.properties = { precision: 1 };\n    }\n\n    public onExecute() {\n        let A: number = this.getInputData(0);\n        if (A === undefined) A = 0;\n\n        let B: number = this.getInputData(1);\n        if (B === undefined) B = 0;\n\n        this.setOutputData(0, A - B);\n    }\n}\n","import { LGraphNode } from \"litegraph.js\";\n\nexport class Multiplication extends LGraphNode {\n    constructor() {\n        super();\n\n        this.title = \"Multiplication\";\n\n        this.addInput(\"A\", \"number\");\n        this.addInput(\"B\", \"number\");\n        this.addOutput(\"A*B\", \"number\");\n        this.properties = { precision: 1 };\n    }\n\n    public onExecute() {\n        let A: number = this.getInputData(0);\n        if (A === undefined) A = 0;\n\n        let B: number = this.getInputData(1);\n        if (B === undefined) B = 0;\n\n        this.setOutputData(0, A * B);\n    }\n}\n","import { Component, HostListener, Input, OnInit } from \"@angular/core\";\n\nimport { LGraph, LGraphCanvas, LGraphNode, LiteGraph } from \"litegraph.js\";\nimport registerNodes from \"../../node_types/registry\";\n\nimport { lex } from \"../../compiler/lexer/lexer\";\nimport { printTokens } from \"../../compiler/lexer/utils\";\nimport { Parser } from \"../../compiler/parser/parser\";\nimport words from \"../../compiler/lexer/words\";\nimport { AST } from \"src/compiler/ast/ast\";\nimport {\n    ast_to_block,\n    block_to_nodes,\n    linking_nodes_on_graph,\n    nodes_to_block,\n} from \"./utils\";\nimport { blocks_to_desc } from \"./blocks_to_desc\";\n\n@Component({\n    selector: \"node-graph\",\n    templateUrl: \"./graph.component.html\",\n    styleUrls: [\"./graph.component.css\"],\n})\nexport class GraphComponent implements OnInit {\n    title = \"BluePrintF\";\n    ast: AST = new AST();\n    canvas: LGraphCanvas | undefined;\n    graph: LGraph = new LGraph();\n\n    async loadingTree() {\n        let prgm = await fetch(\"assets/data/simple_add_func.vpy\");\n        // console.log(\"Program: \", await prgm.text());\n\n        let tokens = lex(await prgm.text(), words);\n        printTokens(tokens);\n        let parser = new Parser(tokens);\n        parser.parse();\n        parser.ast.print_tree_v2();\n        this.ast = parser.ast;\n    }\n\n    @HostListener(\"window:resize\", [\"$event\"])\n    onResize(_: Event) {\n        if (this.canvas != undefined) {\n            this.fitToContainer(this.canvas.canvas);\n        }\n    }\n\n    fitToContainer(canvas: HTMLCanvasElement) {\n        canvas.style.width = \"100%\";\n        canvas.style.height = \"100%\";\n        canvas.width = canvas.offsetWidth;\n        canvas.height = canvas.offsetHeight;\n    }\n\n    async ngOnInit() {\n        LiteGraph.clearRegisteredTypes();\n        registerNodes();\n\n        this.graph = new LiteGraph.LGraph();\n        this.canvas = new LGraphCanvas(\"#graph-canvas\", this.graph);\n        this.fitToContainer(this.canvas.canvas);\n\n        /*\n        const node_time = LiteGraph.createNode(\"basic/time\");\n        graph.add(node_time);\n\n        const node_console = LiteGraph.createNode(\"basic/console\");\n        node_console.mode = LiteGraph.ALWAYS;\n        node_console.pos = [100, 200];\n        graph.add(node_console);\n        */\n\n        /*const node_custom = LiteGraph.createNode(\"maths/addition\");\n        node_custom.pos = [300, 100];\n        graph.add(node_custom);*/\n\n        //node_time.connect(0, node_console, 1);\n        await this.loadingTree();\n\n        let blocks = ast_to_block(this.ast);\n        let nodes = block_to_nodes(blocks);\n\n        nodes.forEach((node: LGraphNode) => {\n            this.graph.add(node);\n        });\n\n        linking_nodes_on_graph(nodes, blocks);\n        this.graph.runStep(1);\n    }\n}\n","<canvas\n    id=\"graph-canvas\"\n    width=\"1024\"\n    height=\"720\"\n    style=\"border: 1px solid\"\n></canvas>\n","import WordKinds from \"../kinds\";\nimport type { Parser } from \"./parser\";\nimport {\n    ASTNode,\n    Block,\n    BlockIdentity,\n    BlockIO,\n    BlockLinks,\n    Identifier,\n    IdentityStatement,\n    IOStatement,\n    LinkStatement,\n    Value,\n} from \"../ast/types\";\n\nconst DEBUG_PRINT = false;\nfunction print(indent: number, msg: string) {\n    if (DEBUG_PRINT)\n        console.log(\n            Array(indent * 2)\n                .fill(\" \")\n                .join(\"\") + msg\n        );\n}\n\n/*\nfunction template(parser: Parser): ASTNode {\n    const indent = parser.indent();\n    print(indent, \">>> Block\");\n    // --- logic\n\n    // --- end of logic\n    print(indent, \"<<< Block\");\n    parser.unindent();\n\n    return new ASTNode(\"block\");\n}\n*/\n\nfunction parse_block(parser: Parser): Block {\n    const indent = parser.indent();\n    print(indent, \">>> Block\");\n    // --- logic\n    let block: Block;\n\n    parser.expect(WordKinds.DOUBLE_SEP);\n    const identity = parse_block_identity(parser);\n    parser.expect(WordKinds.SIMPLE_SEP);\n    const io = parse_block_io(parser);\n\n    const next_sep = parser.show_next();\n    if (next_sep.word.kind == WordKinds.SIMPLE_SEP) {\n        parser.expect(WordKinds.SIMPLE_SEP);\n        const links = parse_block_links(parser);\n        parser.expect(WordKinds.DOUBLE_SEP);\n        block = new Block(identity, io, links);\n    } else {\n        parser.expect(WordKinds.DOUBLE_SEP);\n        block = new Block(identity, io);\n    }\n\n    // --- end of logic\n    print(indent, \"<<< Block\");\n    parser.unindent();\n\n    return block;\n}\n\nfunction parse_block_identity(parser: Parser): BlockIdentity {\n    const indent = parser.indent();\n    print(indent, \">>> BlockIdentity\");\n    // --- logic\n\n    let parameters: IdentityStatement[] = [];\n    let next = parser.show_next();\n    while (\n        next.word.kind != WordKinds.DOUBLE_SEP &&\n        next.word.kind != WordKinds.SIMPLE_SEP\n    ) {\n        parameters.push(parse_identity_statement(parser));\n        next = parser.show_next();\n    }\n\n    // --- end of logic\n    print(indent, \"<<< BlockIdentity\");\n    parser.unindent();\n\n    return new BlockIdentity(parameters);\n}\n\nfunction parse_block_io(parser: Parser): BlockIO {\n    const indent = parser.indent();\n    print(indent, \">>> BlockI/O\");\n    // --- logic\n\n    let ins_outs: IOStatement[] = [];\n    let next = parser.show_next();\n    while (\n        next.word.kind != WordKinds.DOUBLE_SEP &&\n        next.word.kind != WordKinds.SIMPLE_SEP\n    ) {\n        ins_outs.push(parse_io_statement(parser));\n        next = parser.show_next();\n    }\n\n    // --- end of logic\n    print(indent, \"<<< BlockI/O\");\n    parser.unindent();\n\n    return new BlockIO(ins_outs);\n}\n\nfunction parse_block_links(parser: Parser): BlockLinks {\n    const indent = parser.indent();\n    print(indent, \">>> BlockLinks\");\n    // --- logic\n\n    let links: ASTNode[] = [];\n    let next = parser.show_next();\n    while (\n        next.word.kind != WordKinds.DOUBLE_SEP &&\n        next.word.kind != WordKinds.SIMPLE_SEP\n    ) {\n        links.push(parse_link_statement(parser));\n        next = parser.show_next();\n    }\n\n    // --- end of logic\n    print(indent, \"<<< BlockLinks\");\n    parser.unindent();\n\n    return new BlockLinks(links);\n}\n\nfunction parse_identity_statement(parser: Parser): IdentityStatement {\n    const indent = parser.indent();\n    print(indent, \">>> IdentityStatement\");\n    // --- logic\n\n    const id = parser.expect(WordKinds.IDENTIFIER);\n    parser.expect(WordKinds.COLON);\n    const value = parser.expectChoice([\n        WordKinds.INTEGER,\n        WordKinds.FLOAT,\n        WordKinds.BOOL,\n        WordKinds.IDENTIFIER,\n        WordKinds.STRING,\n        WordKinds.VECTOR,\n    ]);\n\n    // --- end of logic\n    print(indent, \"<<< IdentityStatement\");\n    parser.unindent();\n\n    return new IdentityStatement(\n        new Identifier(id.value),\n        new Value(value.value)\n    );\n}\n\nfunction parse_io_statement(parser: Parser): IOStatement {\n    const indent = parser.indent();\n    print(indent, \">>> IdentityStatement\");\n    // --- logic\n\n    const accepted_values = [\n        WordKinds.INTEGER,\n        WordKinds.FLOAT,\n        WordKinds.BOOL,\n        WordKinds.IDENTIFIER,\n        WordKinds.STRING,\n    ];\n\n    const in_out = parser.expect(WordKinds.IDENTIFIER);\n    parser.expect(WordKinds.COLON);\n    const name = parser.expectChoice(accepted_values);\n    parser.expect(WordKinds.COMMA);\n    const type = parser.expect(WordKinds.IDENTIFIER);\n    parser.expect(WordKinds.COMMA);\n    const value = parser.expectChoice([\n        ...accepted_values,\n        WordKinds.LINKED_ID,\n    ]);\n\n    // --- end of logic\n    print(indent, \"<<< IdentityStatement\");\n    parser.unindent();\n\n    return new IOStatement(\n        new Value(in_out.value),\n        new Value(name.value),\n        new Value(type.value),\n        new Value(value.value)\n    );\n}\n\nfunction parse_link_statement(parser: Parser): LinkStatement {\n    const indent = parser.indent();\n    print(indent, \">>> LinkStatement\");\n    // --- logic\n\n    parser.expect(WordKinds.IDENTIFIER);\n    parser.expect(WordKinds.COLON);\n    const out_id = parser.expect(WordKinds.INTEGER);\n    parser.expect(WordKinds.OP_MINUS);\n    parser.expect(WordKinds.OP_MINUS);\n    parser.expect(WordKinds.OP_MINUS);\n    parser.expect(WordKinds.OP_GT); // --->\n    const block_id = parser.expect(WordKinds.INTEGER);\n    parser.expect(WordKinds.COMMA);\n    const in_id = parser.expect(WordKinds.INTEGER);\n\n    // --- end of logic\n    print(indent, \"<<< LinkStatement\");\n    parser.unindent();\n\n    return new LinkStatement(\n        new Value(out_id.value),\n        new Value(in_id.value),\n        new Value(block_id.value)\n    );\n}\n\nexport { parse_block };\n","import { LGraphNode } from \"litegraph.js\";\n\nexport class String extends LGraphNode {\n    constructor() {\n        super();\n\n        this.title = \"String\";\n        this.size = [180, 30];\n\n        this.addOutput(\"\", \"string\");\n        this.addProperty(\"value\", \"\", \"string\");\n\n        this.addWidget(\"text\", \"value\", \"\", \"value\");\n        this.widgets_up = true;\n    }\n\n    public onExecute() {\n        this.setOutputData(0, parseFloat(this.properties[\"value\"]));\n    }\n}\n","import { LGraphNode } from \"litegraph.js\";\n\nexport class Division extends LGraphNode {\n    constructor() {\n        super();\n\n        this.title = \"Division\";\n\n        this.addInput(\"A\", \"number\");\n        this.addInput(\"B\", \"number\");\n        this.addOutput(\"A/B\", \"number\");\n        this.properties = { precision: 1 };\n    }\n\n    public onExecute() {\n        let A: number = this.getInputData(0);\n        if (A === undefined) A = 0;\n\n        let B: number = this.getInputData(1);\n        if (B === undefined) B = 1;\n\n        if (B === 0) this.setOutputData(0, Infinity);\n        else this.setOutputData(0, A - B);\n    }\n}\n","import { parse_block } from \"./grammar\";\nimport WordKinds from \"../kinds\";\nimport { Token } from \"../types\";\nimport { AST } from \"../ast/ast\";\n\nclass ParsingError extends Error {\n    name = \"ParsingError\";\n    constructor(message?: string) {\n        super(message);\n        if (message != undefined) this.message = message;\n    }\n}\n\nexport class Parser {\n    tokens: Token[] = [];\n    indentation: number = -1;\n    ast: AST = new AST();\n\n    constructor(tokens: Token[]) {\n        this.tokens = tokens;\n    }\n\n    public accept_it(): Token {\n        let ret = this.tokens.shift();\n        if (ret == undefined) {\n            throw new ParsingError(\"Not enough token remaining to accept\");\n        }\n        return ret;\n    }\n\n    public maybe(kind: WordKinds): Token | undefined {\n        if (this.show_next().word.kind === kind) {\n            return this.accept_it();\n        }\n        return undefined;\n    }\n\n    public expect(kind: WordKinds): Token {\n        let token = this.show_next();\n        if (token.word.kind === kind) {\n            return this.accept_it();\n        } else {\n            let msg =\n                \"Syntax error (line, col): (\" +\n                token?.position.line +\n                \", \" +\n                token.position.col +\n                \"). \";\n            msg += \"Expecting \" + kind + \". Got \" + token.word.kind + \".\";\n            throw new ParsingError(msg);\n        }\n    }\n\n    public expectChoice(kinds: WordKinds[]): Token {\n        let token = this.show_next();\n        if (kinds.indexOf(token.word.kind) > -1) {\n            return this.accept_it();\n        } else {\n            let msg =\n                \"Syntax error (line, col): (\" +\n                token?.position.line +\n                \", \" +\n                token.position.col +\n                \"). \";\n            let choices = \"\";\n            kinds.map((kind) => (choices += \";\" + kind));\n            msg +=\n                \"Expecting one of \" +\n                choices +\n                \". Got \" +\n                token.word.kind +\n                \".\";\n            throw new ParsingError(msg);\n        }\n    }\n\n    public show_next(n: number = 1): Token {\n        let next = this.tokens[n - 1];\n        if (next != undefined) {\n            return next;\n        } else {\n            throw new ParsingError(\"Show next: Not enough tokens\");\n        }\n    }\n\n    public look_ahead(n: number = 2): Token {\n        let next = this.tokens[n];\n        if (next != undefined) {\n            return next;\n        } else {\n            throw new ParsingError(\"Look ahead: Not enough tokens\");\n        }\n    }\n\n    public indent(): number {\n        this.indentation++;\n        return this.indentation;\n    }\n\n    public unindent(): number {\n        this.indentation--;\n        return this.indentation;\n    }\n\n    public parse() {\n        while (this.tokens.length > 0) {\n            this.ast.get_root().add_child(parse_block(this));\n        }\n    }\n}\n","import { LGraphNode } from \"litegraph.js\";\n\nexport class ToString extends LGraphNode {\n    constructor() {\n        super();\n\n        this.title = \"To String\";\n\n        this.addInput(\"in\", \"\");\n        this.addOutput(\"out\", \"string\");\n    }\n\n    public onExecute() {\n        let in_data: any = this.getInputData(0);\n        if (in_data === undefined) in_data = 0;\n\n        this.setOutputData(0, String(in_data));\n    }\n}\n","import { enableProdMode } from \"@angular/core\";\nimport { platformBrowserDynamic } from \"@angular/platform-browser-dynamic\";\n\nimport { AppModule } from \"./app/app.module\";\nimport { environment } from \"./environments/environment\";\n\nif (environment.production) {\n    enableProdMode();\n}\n\nplatformBrowserDynamic()\n    .bootstrapModule(AppModule)\n    .catch((err) => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}